// Depends on plugins:
//    id 'jacoco'

//     TEST
// ==============

liveTest.description = 'Runs the integration tests against live systems'
integrationTest.description = 'Run the integration tests against docker containers'
fixedClientEnvironmentTest.description = 'Run the integration tests within and against docker containers, should be run within `xenonmiddleware/fixed-client` docker container'

// Never up to date, can not verify same config/props/remote is used second time
liveTest.outputs.upToDateWhen {
    // TODO cache liveTest arguments for example `./gradlew liveTest -Dscheduler=slurm -Dlocation=das5.vu.nl -Dcredential=default DpropertiesFile=slurm-das5.props`
    // then cache `-Dscheduler=slurm -Dlocation=das5.vu.nl -Dcredential=default DpropertiesFile=slurm-das5.props` when liveTest is run with same arguments return true.
    false
}

check.dependsOn integrationTest
integrationTest.mustRunAfter test

// See progress of tests
tasks.withType(Test) {
    // only verbose logging on when CI environment var is set, because on CI we can't look at html test reports
    if (System.getenv("CI")) {
        testLogging {
            events 'started', 'passed', 'skipped', 'failed'
            exceptionFormat 'full'
            showStackTraces true
        }
    }
}

//    COVERAGE
// ==============

jacocoTestCoverageVerification.group = 'Code coverage reporting'

jacoco {
    toolVersion = "0.8.3"
}

jacocoTestReport {
    description 'Generate coverage report of unit tests'
    group 'Code coverage reporting'
    executionData test
    sourceSets sourceSets.main
    reports {
        xml.enabled = true // codecov depends on xml format report
    }
}

task jacocoIntegrationTestReport(type: JacocoReport) {
    description 'Generate coverage report of integration tests'
    group 'Code coverage reporting'
    executionData integrationTest
    sourceSets sourceSets.main
    reports {
        xml.enabled = true // codecov depends on xml format report
    }
}

task jacocoFixedClientEnvironmentTestReport(type: JacocoReport) {
    description 'Generate coverage report of fixed client environment tests'
    group 'Code coverage reporting'
    executionData fixedClientEnvironmentTest
    sourceSets sourceSets.main
    reports {
        xml.enabled = true // codecov depends on xml format report
    }
}

task jacocoLiveTestReport(type: JacocoReport) {
    description 'Generate coverage report of live integration tests'
    group 'Code coverage reporting'
    executionData liveTest
    sourceSets sourceSets.main
    reports {
        xml.enabled = true // codecov depends on xml format report
    }
}

task jacocoMergedTestReport(type: JacocoReport) {
    description 'Generate combined coverage report of unit and integration tests'
    group 'Code coverage reporting'
    executionData( files { file('build/jacoco').listFiles() } )
    sourceSets sourceSets.main
}
